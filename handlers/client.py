import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext

from create_bot import dp, db, qiwi, bot
from data import NUMBER_QIWI, WEEKDAYS, MODERATORS
from googleapi.googledocs import get_data_time, update_status
from keyboards.admin_kb import refounding_kb
from keyboards.client_kb import send_location_kb, move_between_barbers_kb, barbers_callback, show_services_btn, \
    services_callback, payment_markup, user_kb, update_callback, weeks_kb, week_day_callback, time_callback, time_kb, \
    cancel_kb
from states.user_states import UserStates
from utils.location_calcs import choose_shortest


@dp.message_handler(text='–ü–æ–∏—Å–∫ –±–∞—Ä–±–µ—Ä–æ–≤ üîç', state='*')
async def get_location(message: types.Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', reply_markup=send_location_kb)


@dp.message_handler(text='–ú–æ—è –∑–∞–ø–∏—Å—å üìù', state='*')
async def get_user_zapis(message: types.Message):
    user_id = message.from_user.id

    user = db.select_user(user_id)

    if user[7]:

        service = db.get_service(user[7])

        barber = db.get_barber(service[1])

        google_map_url = f'https://maps.google.com/maps?q={barber[5]},{barber[4]}'

        barber_photo = barber[1]

        data = {
            'week_day': WEEKDAYS[user[8]-1],
            'time': user[6],
            'service_name': service[2],
            'service_price': service[3],
            'barber_name': barber[2],
            'barber_phone': barber[3],
            'map': google_map_url
        }

        answer_text = """
–í–∞—à–∞ –∑–∞–ø–∏—Å—å:

–ë–∞—Ä–±–µ—Ä: {barber_name}

–ù–æ–º–µ—Ä –±–∞—Ä–±–µ—Ä–∞: {barber_phone}

–£—Å–ª—É–≥–∞: {service_name}

–¶–µ–Ω–∞: {service_price}

–õ–æ–∫–∞—Ü–∏—è: <a href='{map}'>üó∫ –∫–∞—Ä—Ç–∞</a>
"""

        await message.answer(text=answer_text.format_map(data), disable_web_page_preview=True, parse_mode='HTML',
                             reply_markup=cancel_kb)
    else:
        await message.answer(text='–ü–æ–∫–∞ —á—Ç–æ –≤—ã –µ—â—ë –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã')


@dp.callback_query_handler(text='cancel')
async def delete_message_show_menu(call: types.CallbackQuery):
    markup = user_kb
    await call.message.delete()
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç', reply_markup=markup)


@dp.message_handler(content_types=types.ContentType.LOCATION)
async def show_closest_barbers(message: types.Message):
    my_location = message.location
    my_long = my_location.longitude
    my_lat = my_location.latitude
    db.save_location(message.from_user.id, my_long, my_lat)

    barbers = db.get_all_barbers()

    shortest_barbers = choose_shortest(my_lat, my_long, barbers)

    barber = db.get_barber(shortest_barbers[0][0])

    text = f"""
–ò–º—è: {barber[2]}
–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {barber[6]}

–ö–æ–Ω—Ç–∞–∫—Ç: {barber[3]}
"""

    markup = await move_between_barbers_kb(0)

    await message.answer_photo(caption=text, photo=barber[1], reply_markup=markup)


@dp.callback_query_handler(barbers_callback.filter(action='move'))
async def show_another_barber(call: types.CallbackQuery, callback_data: dict):
    user = db.select_user(call.message.chat.id)
    list_position = callback_data['position']
    barbers = db.get_all_barbers()
    shortest_barbers = choose_shortest(user[5], user[4], barbers)

    barber = db.get_barber(shortest_barbers[int(list_position)][0])

    text = f"""
–ò–º—è: {barber[2]}
–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {barber[6]}
–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {shortest_barbers[int(list_position)][1]} km

–ö–æ–Ω—Ç–∞–∫—Ç: {barber[3]}
"""

    markup = await move_between_barbers_kb(int(list_position))
    await call.message.delete()
    await call.message.answer_photo(caption=text, photo=barber[1], reply_markup=markup)


@dp.callback_query_handler(barbers_callback.filter(action='select'))
async def show_another_barber(call: types.CallbackQuery, callback_data: dict):
    user = db.select_user(call.message.chat.id)
    list_position = callback_data['position']
    barbers = db.get_all_barbers()
    shortest_barbers = choose_shortest(user[5], user[4], barbers)

    barber = db.get_barber(shortest_barbers[int(list_position)][0])

    services = db.get_all_services(barber[0])

    answer_text = '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:\n\n'

    try:
        for index, service in enumerate(services):
            answer_text += f'{index + 1}. {service[2]} - {service[3]} rub \n\n'
    except:
        services = None

    markup = await show_services_btn(list_position, services)

    await call.message.edit_caption(caption=answer_text, reply_markup=markup)


@dp.callback_query_handler(services_callback.filter())
async def show_week_days(call: types.CallbackQuery, callback_data: dict):
    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—à–µ–Ω–∏–µ
    text = call.message.caption
    await call.message.edit_caption(caption=text + '\n\n–ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–∞—Ä–±–µ—Ä–∞(–ø–æ–¥–æ–∂–¥–∏—Ç–µ) üîç')
    service_id = callback_data['service_id']
    service = db.get_service(service_id)
    barber = db.get_barber(service[1])

    # –ë–µ—Ä–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –±–∞—Ä–±–µ—Ä–∞ –∏–∑ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü
    data = await get_data_time(barber[7])

    weekday_index = datetime.datetime.today().isoweekday()

    free_days = data[weekday_index:]

    # –°–æ–∑–¥–∞–µ–º Inline –∫–ª–∞–≤—É —Å –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    markup = await weeks_kb(free_days, weekday_index, service_id)

    await call.message.edit_caption(caption='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—åüíáüèª‚Äç‚ôÇ', reply_markup=markup)


@dp.callback_query_handler(week_day_callback.filter())
async def show_free_time(call: types.CallbackQuery, callback_data: dict):
    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—à–µ–Ω–∏–µ
    text = call.message.caption
    await call.message.edit_caption(caption=text + '\n\n–ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–∞—Ä–±–µ—Ä–∞(–ø–æ–¥–æ–∂–¥–∏—Ç–µ) üîç')
    service_id = callback_data['service_id']
    weekday_index = callback_data['day']
    service = db.get_service(service_id)
    barber = db.get_barber(service[1])
    # –ë–µ—Ä–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –±–∞—Ä–±–µ—Ä–∞ –∏–∑ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü
    data = await get_data_time(barber[7])

    free_times = data[int(weekday_index)]

    # –°–æ–∑–¥–∞–µ–º Inline –∫–ª–∞–≤—É —Å —Å–≤–æ–±–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–∞–º–∏
    markup = await time_kb(data[0], free_times, weekday_index, service_id)

    await call.message.edit_caption(caption='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—åüíáüèª‚Äç‚ôÇ', reply_markup=markup)


@dp.callback_query_handler(time_callback.filter())
async def show_service_details(call: types.CallbackQuery, callback_data: dict):
    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—à–µ–Ω–∏–µ
    text = call.message.caption
    await call.message.edit_caption(caption=text + '\n\n–ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–∞—Ä–±–µ—Ä–∞(–ø–æ–¥–æ–∂–¥–∏—Ç–µ) üîç')
    service_id = callback_data['service_id']
    weekday_index = int(callback_data['weekday_index']) + 1
    time = callback_data['time']
    service = db.get_service(service_id)
    barber = db.get_barber(service[1])

    service_price = service[3]

    bill_url = f"https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={NUMBER_QIWI[1:]}&amountInteger={int(service_price)}&amountFraction=0&extra%5B%27comment%27%5D={call.message.chat.id}&currency=643"

    markup = await payment_markup(bill_url, service_id, weekday_index, time)

    answer_text = f"""
–ë–∞—Ä–±–µ—Ä: {barber[2]}
–£—Å–ª—É–≥–∞: {service[2]}
–°—Ç–æ–∏–º–æ—Å—Ç—å: {service[3]}

–ó–∞–ø–∏—Å–∞–ª–∏ –≤–∞—Å –≤ {WEEKDAYS[weekday_index - 1]} –≤ {time} 
"""

    await call.message.edit_caption(caption=answer_text, reply_markup=markup)


@dp.callback_query_handler(update_callback.filter())
async def check_payment(call: types.CallbackQuery, callback_data: dict):
    service_id = callback_data['service']
    weekday_index = int(callback_data['weekday_index'])
    time = callback_data['time']
    service = db.get_service(service_id)
    barber = db.get_barber(service[1])
    url = barber[7]
    qiwi.start()
    payments = qiwi.payments
    for payment in payments['data']:
        print(payment['date'])
        date = str(datetime.datetime.now().isoformat()).split('T')[0]
        print(date)
        if payment['comment'] == str(call.message.chat.id) and payment['date'].split('T')[0] == date:
            db.update_user(call.message.chat.id, service_id, weekday_index, time)
            await update_status(url, time, weekday_index, call.message.chat.id)
            await call.message.edit_reply_markup()
            await call.message.answer('–ó–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ !!', reply_markup=user_kb)
            return

    await call.message.answer('–ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è.')


# –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞

@dp.callback_query_handler(text='cancel_zapis')
async def refounding(call: types.CallbackQuery):
    await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ü§≥üèº, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ—à–µ–ª—å–∫—É Qiwi.\n–ü—Ä–∏–º–µ—Ä: +79123456789')
    await UserStates.phone_number.set()


@dp.message_handler(state=UserStates.phone_number)
async def getting_number(message: types.Message):
    phone = message.text

    if phone[0] == '+' and len(phone) == 12:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞üò∞ \n(–°–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã): ')
        await UserStates.reason.set()
        db.update_number(message.from_user.id, phone)
    else:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µüíÅüèª +79123456789 üìû')


@dp.message_handler(state=UserStates.reason)
async def refound_req_admin(message: types.Message, state: FSMContext):
    reason = message.text
    username = message.from_user.username
    name = message.from_user.first_name
    user_id = message.from_user.id

    user = db.select_user(user_id)
    service = db.get_service(user[7])
    barber = db.get_barber(service[1])
    admin_text = """
–ö–ª–∏–µ–Ω—Ç: <a href="https://t.me/{username}">{name}</a>

–£—Å–ª—É–≥–∞: {service_name}
–¶–µ–Ω–∞: {service_price}

–ë–∞—Ä–±–µ—Ä: {barber_name}

–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:
{reason}
"""

    data = {
        'service_name': service[2],
        'service_price': service[3],
        'barber_name': barber[2],
        'reason': reason,
        'username': username,
        'name': name,
    }

    admin_markup = await refounding_kb(user_id)

    await bot.send_message(chat_id=MODERATORS[0], text=admin_text.format_map(data), disable_web_page_preview=True,
                           parse_mode="HTML", reply_markup=admin_markup)

    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –∑–∞–π–º–µ—Ç –º–∞–∫—Å–∏–º—É–º 24 —á.')
    await state.finish()
