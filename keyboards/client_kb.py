from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_kb = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [
            KeyboardButton(text='–ü–æ–∏—Å–∫ –±–∞—Ä–±–µ—Ä–æ–≤ üîç'),
            KeyboardButton(text='–ú–æ—è –∑–∞–ø–∏—Å—å üìù'),
        ],
        [
            KeyboardButton(text='–û –Ω–∞—Åüßê'),
            KeyboardButton(text='–ù–∞—à–∏ —É—Å–ª—É–≥–∏üíÖüèº'),
        ],
        [
            KeyboardButton(text='–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µüåç'),
            KeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã‚òé'),
        ]
    ]
)

cancel_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data='cancel_zapis')
        ]
    ]
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤—å–∫–∏ –ª–æ–∫–∞—Ü–∏—é
send_location_kb = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [
            KeyboardButton('–ú–æ—è –ª–æ–∫–∞—Ü–∏—è üìç', request_location=True)
        ]
    ]
)

barbers_callback = CallbackData('barber', 'position', 'action')
services_callback = CallbackData('service', 'service_id')
update_callback = CallbackData('update', 'service', 'weekday_index', 'time')


# –ò–Ω–ª–∞–π–Ω –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–µ–∂–¥—É –±–∞—Ä–±–µ—Ä–æ–≤
async def move_between_barbers_kb(current_barber_id):
    return InlineKeyboardMarkup(
        row_width=3,
        inline_keyboard=[
            [
                InlineKeyboardButton(text='<== –ü—Ä–µ–¥.',
                                     callback_data=barbers_callback.new(position=current_barber_id - 1, action='move')),
                InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å',
                                     callback_data=barbers_callback.new(position=current_barber_id, action='select')),
                InlineKeyboardButton(text='–°–ª–µ–¥. ==>',
                                     callback_data=barbers_callback.new(position=current_barber_id + 1, action='move')),
            ]
        ]
    )


# –ò–Ω–ª–∞–π–Ω –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–µ–∂–¥—É –±–∞—Ä–±–µ—Ä–æ–≤
async def show_services_btn(current_barber_id, services):
    markup = InlineKeyboardMarkup(
        row_width=3
    )

    if services:
        for index, service in enumerate(services):
            markup.insert(
                InlineKeyboardButton(text=f'{index + 1}', callback_data=services_callback.new(service_id=service[0])))

    markup.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                    callback_data=barbers_callback.new(position=current_barber_id, action='move')))

    return markup


# –ò–Ω–ª–∞–π–Ω –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–µ–∂–¥—É –±–∞—Ä–±–µ—Ä–æ–≤
async def payment_markup(url, service, weekday_index, time):
    markup = InlineKeyboardMarkup(
        row_width=2,
        inline_keyboard=[
            [
                InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=url)
            ],
            [
                InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data=update_callback.new(
                    weekday_index=weekday_index,
                    time=time,
                    service=service
                ))
            ],
            [
                InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
            ]
        ]
    )
    return markup


week_day_callback = CallbackData('weekday', 'day', 'service_id')
time_callback = CallbackData('clock', 'time', 'weekday_index', 'service_id')


# –ò–Ω–ª–∞–π–Ω –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å—Ç–∞–≤—à—ã–π –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
async def weeks_kb(data, weekday_index, service_id):
    markup = InlineKeyboardMarkup(
        row_width=2,
    )

    for i, days in enumerate(data):
        markup.insert(InlineKeyboardButton(text=days[0], callback_data=week_day_callback.new(day=weekday_index + i,
                                                                                             service_id=service_id)))

    return markup


# –ò–Ω–ª–∞–π–Ω –ö–Ω–æ–ø–∫–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤—Ä–µ–º–∏
async def time_kb(time, data, weekday_index, service_id):
    markup = InlineKeyboardMarkup(
        row_width=2,
    )

    for i, zapis in enumerate(data):
        if zapis == '':
            markup.insert(
                InlineKeyboardButton(text=time[i], callback_data=time_callback.new(time=time[i].replace(':', '.'),
                                                                                   weekday_index=weekday_index,
                                                                                   service_id=service_id)))

    return markup
